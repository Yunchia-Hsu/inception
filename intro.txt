第 2 步：認識 Docker（容器的概念）
為什麼需要？
Inception 專案最重要的就是把每個服務放進自己的 Docker 容器，所以 Docker 是整個專案的核心。

具體該做什麼？
安裝 Docker：

在 macOS 可以裝 Docker Desktop

在 Windows 也可以裝 Docker Desktop

若你在 Linux，就直接用該發行版的官方教學（如 Ubuntu，可以用 sudo apt-get install docker.io 或參考 Docker 官方文件）。

跑官方範例：

先跑一次 docker run hello-world，它會自動下載 hello-world 映像檔，並跑出一段測試文字，確定安裝正確。

開始學 Docker 核心概念：

什麼是 docker image、docker container。

常用指令：docker pull, docker run, docker stop, docker ps, docker build。

入門推薦資源：

Docker 官方網站的 Get Started 教程（英文為主，但解說清楚）。

YouTube 搜尋「Docker 入門」、「Docker 初學者教學」。

如果能閱讀英文，也可以看 Docker Docs（https://docs.docker.com/）。中文資源相對少，但還是有一些翻譯或部落格文章。

第 3 步：動手寫 Dockerfile
為什麼需要？
Inception 專案中，你必須自己撰寫 Dockerfile 來打造每個服務（Nginx、WordPress、MariaDB）的映像檔。

具體該做什麼？
寫一個最簡單的 Dockerfile

例如 FROM alpine 開始，在裏頭 RUN apk update && apk add vim 之類的基礎操作。

然後 docker build -t myimage . 來產生映像檔。

了解 Dockerfile 基本指令：FROM、RUN、COPY、ENV、CMD、EXPOSE 等等。

參考資源：

Docker 官方文件有「Dockerfile Reference」一節（Docs: Dockerfile reference）。

同樣可以在 YouTube 找「Dockerfile 教學」，以中文或英文關鍵字搜索都可。

第 4 步：學習 Docker Compose
為什麼需要？
因為在 Inception 專案裡，需要同時管理多個容器（Nginx、WordPress、MariaDB），用 Docker Compose 可以一次啟動、停止它們，並設定網路、Volume 等，方便很多。

具體該做什麼？
安裝 Docker Compose：

大多數 Docker Desktop 已內建 Compose v2；若沒有，可以依官方教學安裝 docker-compose 或使用 Docker CLI 內建。

嘗試官方範例：

Docker docs 上的官方範例（Get Started with Docker Compose）。

範例會讓你同時跑一個網頁服務、再加上一個 Redis 服務之類的。

理解 docker-compose.yml 結構：

version: '3.8'

services:（底下有多個服務名稱）

volumes:（定義資料卷）

networks:（定義網路）。

練習撰寫：

建一個最簡單的 docker-compose.yml 讓你一鍵啟動兩個容器，測試它們能否互通。

第 5 步：了解 Nginx、WordPress、MariaDB 的基本運作
為什麼需要？
Inception 會用到 Nginx（網頁伺服器）、WordPress（部落格 / CMS）、以及 MariaDB（資料庫）。

A. Nginx
安裝 Nginx 並測試（可以先在本機或在 Docker 內）

將 Nginx 啟動後，打開瀏覽器看 http://localhost 是否顯示預設頁面。

瞭解如何修改 nginx.conf 和虛擬主機設定檔（server { ... } 區塊）。

加入 HTTPS (TLS/SSL)

可先學習如何產生自簽憑證：openssl req -x509 ...

在 Nginx 設定裡指定 ssl_certificate 與 ssl_certificate_key。

B. WordPress + PHP-FPM
在本機或 Docker 內安裝 WordPress

安裝 PHP 及 PHP-FPM，讓 WordPress 可以跑。

了解 wp-config.php 裡要填入資料庫資訊（DB_HOST、DB_USER、DB_PASSWORD）。

瞭解 Wordpress 架構

WordPress 的檔案位置（wp-content 資料夾）、資料庫結構（文章、使用者都放資料庫裡）。

C. MariaDB
安裝 MariaDB

在本機或 Docker 內跑 mariadb，測試用 mysql -u root -p 登入。

建立資料庫和使用者

例如：

sql
複製
編輯
CREATE DATABASE wordpress_db;
CREATE USER 'wpuser'@'%' IDENTIFIED BY 'some_password';
GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wpuser'@'%';
FLUSH PRIVILEGES;
這些動作在 Inception 中可以透過 docker-entrypoint-initdb.d 或在 Dockerfile 裡的 Script 處理。

第 6 步：把所有服務用 Docker Compose 串起來
要做的事：
寫 docker-compose.yml

3 個服務：nginx、mariadb、wordpress。

2 個 Volume：一個給 MariaDB 用，另一個給 WordPress 檔案用。

為每個服務建立各自的 Dockerfile

nginx/Dockerfile (FROM Alpine or Debian + install Nginx + SSL 設定)。

wordpress/Dockerfile (FROM Alpine or Debian + install PHP-FPM + WordPress)。

mariadb/Dockerfile (FROM Alpine or Debian + install MariaDB + 初始化 DB)。

在 docker-compose.yml 裡引用

build: ./nginx / build: ./wordpress / build: ./mariadb

volumes: - db_data:/var/lib/mysql（示例）等。

執行 docker-compose up -d

檢查三個容器是否正常執行。

嘗試用瀏覽器連線到 https://localhost（或你指定的域名）看看能否看到 WordPress 安裝頁面。

第 7 步：在本機設定「假網域」到 127.0.0.1
要做的事：
修改 /etc/hosts 檔案**（或 Windows 的 hosts 檔）**：

加入一行： 127.0.0.1 login.42.fr （將 login 換成你的 42 帳號）

在 Nginx 設定或 docker-compose 裡：

把 server_name 設成 login.42.fr。

確認能用 https://login.42.fr 開啟網站（可能會有自簽憑證警告，忽略就好，因為是本地開發）。

第 8 步：寫一個 Makefile 來整合操作
要做的事：
Makefile 就像一個「指揮腳本」，比如：

makefile
複製
編輯
build:
  docker-compose build

up:
  docker-compose up -d

down:
  docker-compose down

clean:
  docker-compose down -v
  docker system prune -af
之後只要輸入 make build、make up 就能快速執行。

第 9 步：進階與排錯
排錯技巧

docker-compose logs <service>：查看每個服務的日誌記錄，若有錯誤訊息可在此發現。

docker exec -it <container_name> /bin/sh 或 /bin/bash：進到容器內進行檢查。

安全與最佳實踐

不要把重要密碼寫死在 Dockerfile 裡，可用環境變數或 .env 檔。

如果要進階學習，還可以了解 Docker volume 在 production 環境如何管理備份等。








簡易路線圖回顧
1.認識 Linux →

2.安裝並熟悉 Docker →

3.學 Dockerfile，寫基礎映像檔 →然後 `docker build -t myimage` . 來產生映像檔。

4.Docker Compose 入門 →

5.理解 Nginx、WordPress、MariaDB 分別如何工作 →

6.用 Docker Compose 串接三個服務 →

7.設定假網域 (hosts 檔) →

8.寫 Makefile 做自動化 →

9.排錯與進階設定 →



